 // C·∫•u h√¨nh Gemini AI API
        const GEMINI_API_KEY = 'AIzaSyDfZhAPypqYdKGun2lTblYNheCHth5LXb8';
        const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

        let conversationHistory = [];

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        function sendQuickQuestion(question) {
            document.getElementById('messageInput').value = question;
            sendMessage();
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;

            // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
            addMessage(message, 'user');
            input.value = '';
            
            // Hi·ªÉn th·ªã typing indicator
            showTypingIndicator();
            
            try {
                // G·ªçi API AI
                const response = await callAI(message);
                hideTypingIndicator();
                addMessage(response, 'bot');
            } catch (error) {
                hideTypingIndicator();
                addMessage('Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
                console.error('API Error:', error);
            }
        }

        function addMessage(text, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.innerHTML = text.replace(/\n/g, '<br>');
            
            messageDiv.appendChild(contentDiv);
            messagesContainer.appendChild(messageDiv);
            
            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function showTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'block';
            document.getElementById('sendBtn').disabled = true;
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
            document.getElementById('sendBtn').disabled = false;
        }

        async function callAI(message) {
            // Th√™m context cho chuy√™n gia s·ª©c kh·ªèe
            const systemPrompt = `B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n s·ª©c kh·ªèe v√† dinh d∆∞·ª°ng. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, cung c·∫•p th√¥ng tin ch√≠nh x√°c, th·ª±c t·∫ø v√† h·ªØu √≠ch. Lu√¥n nh·∫Øc nh·ªü ng∆∞·ªùi d√πng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© cho c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng. C√¢u tr·∫£ l·ªùi n√™n ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu v√† c√≥ c·∫•u tr√∫c r√µ r√†ng.`;
            
            conversationHistory.push({role: "user", content: message});

            // N·∫øu ch∆∞a c√≥ API key th√¨ d√πng demo response
            if (!GEMINI_API_KEY || GEMINI_API_KEY === 'AIzaSyDfZhAPypqYdKGun2lTblYNheCHth5LXb8-01Ms') {
                return getDemoResponse(message);
            }

            // G·ªçi Gemini AI API
            try {
                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        contents: [{
                            parts: [{
                                text: `${systemPrompt}\n\nC√¢u h·ªèi: ${message}`
                            }]
                        }],
                        generationConfig: {
                            temperature: 0.7,
                            maxOutputTokens: 1000,
                            topP: 0.8,
                            topK: 10
                        }
                    })
                });

                const data = await response.json();
                
                if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                    const aiResponse = data.candidates[0].content.parts[0].text;
                    conversationHistory.push({role: "assistant", content: aiResponse});
                    return aiResponse;
                } else {
                    throw new Error('Kh√¥ng th·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ Gemini API');
                }
            } catch (error) {
                console.error('Gemini API Error:', error);
                return getDemoResponse(message);
            }
        }

        function getDemoResponse(message) {
            // Demo responses cho c√°c ch·ªß ƒë·ªÅ ph·ªï bi·∫øn
            const responses = {
                'gi·∫£m c√¢n': `üçΩÔ∏è Ch·∫ø ƒë·ªô ƒÉn gi·∫£m c√¢n hi·ªáu qu·∫£:**
                ‚Ä¢ ƒÇn nhi·ªÅu rau xanh: Brokoli, c·∫£i b√≥ x√¥i, c·∫£i th·∫£o
                ‚Ä¢ Protein n·∫°c: Th·ªãt g√†, c√°, ƒë·∫≠u ph·ª•, tr·ª©ng
                ‚Ä¢ Carb ph·ª©c t·∫°p: G·∫°o l·ª©t, y·∫øn m·∫°ch, khoai lang
                ‚Ä¢ U·ªëng ƒë·ªß n∆∞·ªõc: 2-3 l√≠t/ng√†y
                ‚Ä¢ H·∫°n ch·∫ø: ƒê∆∞·ªùng, th·ª©c ƒÉn chi√™n, ƒë·ªì u·ªëng c√≥ ga

            L∆∞u √Ω: Gi·∫£m 0.5-1kg/tu·∫ßn l√† an to√†n. N√™n tham kh·∫£o chuy√™n gia dinh d∆∞·ª°ng!`,
                'mi·ªÖn d·ªãch': `üí™ C√°ch tƒÉng c∆∞·ªùng mi·ªÖn d·ªãch:**
                ‚Ä¢ Vitamin C: Cam, chanh, ·ªïi, kiwi
                ‚Ä¢ Zinc: H·∫°t b√≠, th·ªãt ƒë·ªè, ƒë·∫≠u
                ‚Ä¢ Vitamin D: √Ånh n·∫Øng m·∫∑t tr·ªùi, c√° b√©o
                ‚Ä¢ Ng·ªß ƒë·ªß gi·∫•c: 7-8 ti·∫øng/ƒë√™m
                ‚Ä¢ T·∫≠p th·ªÉ d·ª•c: 30 ph√∫t/ng√†y
                ‚Ä¢ Qu·∫£n l√Ω stress: Thi·ªÅn, yoga

            L∆∞u √Ω: N·∫øu hay ·ªëm, n√™n kh√°m s·ª©c kh·ªèe t·ªïng qu√°t!`,
                'ti·ªÉu ƒë∆∞·ªùng': `üçé **Ch·∫ø ƒë·ªô ƒÉn cho ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng:**
                ‚Ä¢ N√™n ƒÉn Rau xanh, c√°, th·ªãt n·∫°c, g·∫°o l·ª©t
                ‚Ä¢ H·∫°n ch·∫ø ƒê∆∞·ªùng, b√°nh ng·ªçt, n∆∞·ªõc ng·ªçt
                ‚Ä¢ ƒÇn nhi·ªÅu b·ªØa nh·ªè 5-6 b·ªØa/ng√†y
                ‚Ä¢ Ki·ªÉm so√°t portion D√πng ƒëƒ©a nh·ªè
                ‚Ä¢ T·∫≠p th·ªÉ d·ª•c: ƒêi b·ªô sau ƒÉn

            Quan tr·ªçng: Ph·∫£i theo d√µi ƒë∆∞·ªùng huy·∫øt v√† tu√¢n th·ªß ƒëi·ªÅu tr·ªã c·ªßa b√°c sƒ©!`,
                'tim m·∫°ch': `‚ù§Ô∏è Th·ª±c ph·∫©m t·ªët cho tim m·∫°ch:**
                ‚Ä¢ C√° b√©o: C√° h·ªìi, c√° thu, c√° ng·ª´
                ‚Ä¢ H·∫°t: √ìc ch√≥, h·∫°nh nh√¢n, h·∫°t lanh
                ‚Ä¢ Tr√°i c√¢y: Vi·ªát qu·∫•t, d√¢u t√¢y, l·ª±u
                ‚Ä¢ Rau xanh: C·∫£i b√≥ x√¥i, c·∫£i kale
                ‚Ä¢ Y·∫øn m·∫°ch: Gi√∫p gi·∫£m cholesterol
                Tr√°nh: Th·ª©c ƒÉn nhi·ªÅu mu·ªëi, ch·∫•t b√©o trans
                L∆∞u √Ω: N√™n ki·ªÉm tra s·ª©c kh·ªèe tim m·∫°ch ƒë·ªãnh k·ª≥!`
            };

            // T√¨m response ph√π h·ª£p
            const lowerMessage = message.toLowerCase();
            for (let key in responses) {
                if (lowerMessage.includes(key)) {
                    return responses[key];
                }
            }

            // Default response
            return `C√°m ∆°n b·∫°n ƒë√£ h·ªèi v·ªÅ "${message}". 

            T√¥i l√† chatbot t∆∞ v·∫•n s·ª©c kh·ªèe demo. ƒê·ªÉ c√≥ tr·∫£ l·ªùi ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ:
            üî∏ H·ªèi v·ªÅ: dinh d∆∞·ª°ng, gi·∫£m c√¢n, tƒÉng mi·ªÖn d·ªãch, b·ªánh ti·ªÉu ƒë∆∞·ªùng, tim m·∫°ch
            üî∏ S·ª≠ d·ª•ng c√°c g·ª£i √Ω ph√≠a tr√™n
            üî∏ T√≠ch h·ª£p API AI th·ª±c t·∫ø (OpenAI, Gemini) v√†o code
                L∆∞u √Ω quan tr·ªçng: Lu√¥n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© cho c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe nghi√™m tr·ªçng!`;
        }

        // Kh·ªüi t·∫°o
        document.getElementById('messageInput').focus();





//          // C·∫•u h√¨nh Gemini AI API
// const GEMINI_API_KEY = 'AIzaSyDfZhAPypqYdKGun2lTblYNheCHth5LXb8';
// const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
// let conversationHistory = [];

//         function handleKeyPress(event) {
//             if (event.key === 'Enter') {
//                 sendMessage();
//             }
//         }

//         function sendQuickQuestion(question) {
//             document.getElementById('messageInput').value = question;
//             sendMessage();
//         }

//         async function sendMessage() {
//             const input = document.getElementById('messageInput');
//             const message = input.value.trim();
            
//             if (!message) return;

//             // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
//             addMessage(message, 'user');
//             input.value = '';
            
//             // Hi·ªÉn th·ªã typing indicator
//             showTypingIndicator();
            
//             try {
//                 // G·ªçi API AI
//                 const response = await callAI(message);
//                 hideTypingIndicator();
//                 addMessage(response, 'bot');
//             } catch (error) {
//                 hideTypingIndicator();
//                 addMessage('Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
//                 console.error('API Error:', error);
//             }
//         }

//         function addMessage(text, sender) {
//             const messagesContainer = document.getElementById('chatMessages');
//             const messageDiv = document.createElement('div');
//             messageDiv.className = `message ${sender}`;
            
//             const contentDiv = document.createElement('div');
//             contentDiv.className = 'message-content';
//             contentDiv.innerHTML = text.replace(/\n/g, '<br>');
            
//             messageDiv.appendChild(contentDiv);
//             messagesContainer.appendChild(messageDiv);
            
//             // Scroll to bottom
//             messagesContainer.scrollTop = messagesContainer.scrollHeight;
//         }

//         function showTypingIndicator() {
//             document.getElementById('typingIndicator').style.display = 'block';
//             document.getElementById('sendBtn').disabled = true;
//         }

//         function hideTypingIndicator() {
//             document.getElementById('typingIndicator').style.display = 'none';
//             document.getElementById('sendBtn').disabled = false;
//         }

//         async function callAI(message) {
//             // Th√™m context cho chuy√™n gia s·ª©c kh·ªèe
//             const systemPrompt = `B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n s·ª©c kh·ªèe v√† dinh d∆∞·ª°ng c√≥ 15 nƒÉm kinh nghi·ªám. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch CHI TI·∫æT v√† ƒê·∫¶Y ƒê·ª¶. 

//         QUAN TR·ªåNG - H√ÉY TR·ª¢ GI√öP TO√ÄN DI·ªÜN:
//         - Gi·∫£i th√≠ch r√µ r√†ng nguy√™n l√Ω khoa h·ªçc
//         - ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ v√† th·ª±c t·∫ø 
//         - Chia th√†nh c√°c m·ª•c r√µ r√†ng v·ªõi bullet points
//         - Cung c·∫•p l·ªùi khuy√™n th·ª±c h√†nh chi ti·∫øt
//         - ƒê·ªÅ xu·∫•t k·∫ø ho·∫°ch t·ª´ng b∆∞·ªõc
//         - Gi·∫£i th√≠ch t·∫°i sao v√† nh∆∞ th·∫ø n√†o
//         - N√™u c√°c l∆∞u √Ω quan tr·ªçng

// H√ÉY VI·∫æT C√ÇU TR·∫¢ L·ªúI D√ÄI, CHI TI·∫æT V√Ä TO√ÄN DI·ªÜN. Kh√¥ng ng·∫°i vi·∫øt nhi·ªÅu ƒëo·∫°n vƒÉn ƒë·ªÉ ng∆∞·ªùi d√πng hi·ªÉu r√µ v·∫•n ƒë·ªÅ. Lu√¥n nh·∫Øc nh·ªü tham kh·∫£o b√°c sƒ© khi c·∫ßn thi·∫øt.`;
            
//             conversationHistory.push({role: "user", content: message});

//             // N·∫øu ch∆∞a c√≥ API key th√¨ d√πng demo response
//             if (!GEMINI_API_KEY || GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY_HERE') {
//                 return getDemoResponse(message);
//             }

//             // G·ªçi Gemini AI API
//             try {
//                 const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
//                     method: 'POST',
//                     headers: {
//                         'Content-Type': 'application/json',
//                     },
//                     body: JSON.stringify({
//                         contents: [{
//                             parts: [{
//                                 text: `${systemPrompt}\n\nC√¢u h·ªèi: ${message}`
//                             }]
//                         }],
//                         generationConfig: {
//                             temperature: 0.7,
//                             maxOutputTokens: 2000,
//                             topP: 0.9,
//                             topK: 20
//                         }
//                     })
//                 });

//                 const data = await response.json();
                
//                 if (data.candidates && data.candidates[0] && data.candidates[0].content) {
//                     const aiResponse = data.candidates[0].content.parts[0].text;
//                     conversationHistory.push({role: "assistant", content: aiResponse});
//                     return aiResponse;
//                 } else {
//                     throw new Error('Kh√¥ng th·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ Gemini API');
//                 }
//             } catch (error) {
//                 console.error('Gemini API Error:', error);
//                 return getDemoResponse(message);
//             }
//         }

//         function getDemoResponse(message) {
//             // Demo responses chi ti·∫øt h∆°n cho c√°c ch·ªß ƒë·ªÅ ph·ªï bi·∫øn
//             const responses = {
//                 'gi·∫£m c√¢n': `üî• **H∆Ø·ªöNG D·∫™N GI·∫¢M C√ÇN KHOA H·ªåC V√Ä B·ªÄN V·ªÆNG**

// **üí° NGUY√äN L√ù C∆† B·∫¢N:**
// Gi·∫£m c√¢n x·∫£y ra khi b·∫°n ti√™u th·ª• √≠t calo h∆°n so v·ªõi nƒÉng l∆∞·ª£ng c∆° th·ªÉ ƒë·ªët ch√°y (deficit calo). M·ª•c ti√™u an to√†n l√† gi·∫£m 0.5-1kg/tu·∫ßn, t∆∞∆°ng ƒë∆∞∆°ng thi·∫øu h·ª•t 500-750 calo/ng√†y.

// **üçΩÔ∏è CH·ªà TI·∫æT CH·∫æ ƒê·ªò ƒÇN:**

// *B·ªØa s√°ng (400-500 calo):*
// ‚Ä¢ 1 b√°t y·∫øn m·∫°ch + 1 qu·∫£ chu·ªëi + 10 h·∫°t √≥c ch√≥
// ‚Ä¢ Ho·∫∑c: 2 l√°t b√°nh m√¨ nguy√™n c√°m + 1 qu·∫£ tr·ª©ng lu·ªôc + rau x√† l√°ch
// ‚Ä¢ 1 c·ªëc n∆∞·ªõc chanh kh√¥ng ƒë∆∞·ªùng

// *B·ªØa tr∆∞a (500-600 calo):*
// ‚Ä¢ 100g th·ªãt g√†/c√°/ƒë·∫≠u ph·ª• n∆∞·ªõng
// ‚Ä¢ 1 ch√©n c∆°m g·∫°o l·ª©t (kho·∫£ng 150g)
// ‚Ä¢ Nhi·ªÅu rau xanh: brokoli, c·∫£i th·∫£o, d∆∞a chu·ªôt
// ‚Ä¢ 1 ch√©n canh rau kh√¥ng d·∫ßu m·ª°

// *B·ªØa t·ªëi (400-500 calo):*
// ‚Ä¢ Salad l·ªõn v·ªõi rau xanh ƒëa d·∫°ng
// ‚Ä¢ 80g protein (th·ªãt n·∫°c, c√°, t√¥m)
// ‚Ä¢ 1 c·ªß khoai lang nh·ªè n∆∞·ªõng
// ‚Ä¢ Dressing: d·∫ßu √¥ liu + chanh

// *Snack (100-150 calo/ng√†y):*
// ‚Ä¢ 1 qu·∫£ t√°o + 1 th√¨a h·∫°nh nh√¢n
// ‚Ä¢ S·ªØa chua Hy L·∫°p kh√¥ng ƒë∆∞·ªùng
// ‚Ä¢ C√† r·ªët th√°i que + hummus

// **üí™ K·∫æT H·ª¢P V·∫¨N ƒê·ªòNG:**
// ‚Ä¢ Cardio: 30-45 ph√∫t, 4-5 l·∫ßn/tu·∫ßn (ƒëi b·ªô nhanh, ch·∫°y, b∆°i)
// ‚Ä¢ T·∫≠p t·∫°: 2-3 l·∫ßn/tu·∫ßn ƒë·ªÉ gi·ªØ c∆° b·∫Øp
// ‚Ä¢ HIIT: 15-20 ph√∫t, 2 l·∫ßn/tu·∫ßn cho ƒë·ªët m·ª° nhanh

// **‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:**
// - U·ªëng 2.5-3 l√≠t n∆∞·ªõc/ng√†y
// - Ng·ªß ƒë·ªß 7-8 ti·∫øng ƒë·ªÉ c√¢n b·∫±ng hormone
// - Kh√¥ng b·ªè b·ªØa, ƒÉn ƒë·ªÅu 4-5 b·ªØa nh·ªè
// - Theo d√µi c√¢n n·∫∑ng 1 l·∫ßn/tu·∫ßn v√†o bu·ªïi s√°ng
// - N·∫øu c√≥ b·ªánh l√Ω, tham kh·∫£o b√°c sƒ© tr∆∞·ªõc khi gi·∫£m c√¢n`,

//                 'mi·ªÖn d·ªãch': `üõ°Ô∏è **TƒÇNG C∆Ø·ªúNG H·ªÜ MI·ªÑN D·ªäCH TO√ÄN DI·ªÜN**

// **üß¨ HI·ªÇU V·ªÄ H·ªÜ MI·ªÑN D·ªäCH:**
// H·ªá mi·ªÖn d·ªãch l√† m·∫°ng l∆∞·ªõi ph·ª©c t·∫°p g·ªìm t·∫ø b√†o, m√¥ v√† c∆° quan b·∫£o v·ªá c∆° th·ªÉ kh·ªèi vi khu·∫©n, virus v√† ƒë·ªôc t·ªë. Khi h·ªá mi·ªÖn d·ªãch y·∫øu, b·∫°n d·ªÖ m·∫Øc b·ªánh v√† h·ªìi ph·ª•c ch·∫≠m.

// **ü•ó DINH D∆Ø·ª†NG TƒÇNG MI·ªÑN D·ªäCH:**

// *Vitamin C (80-120mg/ng√†y):*
// ‚Ä¢ Cam, chanh: 1-2 qu·∫£/ng√†y
// ‚Ä¢ ·ªîi: 1 qu·∫£ cung c·∫•p 200mg vitamin C
// ‚Ä¢ Kiwi, d√¢u t√¢y, brokoli
// ‚Ä¢ Vai tr√≤: K√≠ch th√≠ch s·∫£n xu·∫•t b·∫°ch c·∫ßu

// *Vitamin D (1000-2000 IU/ng√†y):*
// ‚Ä¢ Ph∆°i n·∫Øng 15-20 ph√∫t bu·ªïi s√°ng
// ‚Ä¢ C√° h·ªìi, c√° thu, tr·ª©ng
// ‚Ä¢ N·∫•m maitake, n·∫•m portobello
// ‚Ä¢ Vai tr√≤: ƒêi·ªÅu h√≤a ph·∫£n ·ª©ng mi·ªÖn d·ªãch

// *Zinc (8-11mg/ng√†y):*
// ‚Ä¢ H·∫°t b√≠ ng√¥: 2 th√¨a/ng√†y
// ‚Ä¢ Th·ªãt ƒë·ªè n·∫°c, t√¥m cua
// ‚Ä¢ ƒê·∫≠u ƒëen, ƒë·∫≠u lƒÉng
// ‚Ä¢ Vai tr√≤: H·ªó tr·ª£ ho·∫°t ƒë·ªông t·∫ø b√†o T

// *Probiotic:*
// ‚Ä¢ S·ªØa chua kh√¥ng ƒë∆∞·ªùng, kimchi
// ‚Ä¢ Tempeh, miso, kefir
// ‚Ä¢ Suplement probiotic 10-50 t·ª∑ CFU
// ‚Ä¢ Vai tr√≤: 70% mi·ªÖn d·ªãch n·∫±m ·ªü ru·ªôt

// **üí§ L·ªêI S·ªêNG TƒÇNG MI·ªÑN D·ªäCH:**
// ‚Ä¢ Ng·ªß 7-9 ti·∫øng: C∆° th·ªÉ s·∫£n xu·∫•t cytokine ch·ªëng vi√™m
// ‚Ä¢ T·∫≠p th·ªÉ d·ª•c v·ª´a ph·∫£i: 30 ph√∫t ƒëi b·ªô n√¢ng mi·ªÖn d·ªãch 24h
// ‚Ä¢ Qu·∫£n l√Ω stress: Yoga, thi·ªÅn, nghe nh·∫°c
// ‚Ä¢ Kh√¥ng h√∫t thu·ªëc, h·∫°n ch·∫ø r∆∞·ª£u

// **üåø TH·∫¢O D∆Ø·ª¢C H·ªñ TR·ª¢:**
// ‚Ä¢ T·ªèi: Allicin c√≥ t√°c d·ª•ng kh√°ng khu·∫©n
// ‚Ä¢ G·ª´ng: Gingerol ch·ªëng vi√™m
// ‚Ä¢ Ngh·ªá: Curcumin tƒÉng c∆∞·ªùng mi·ªÖn d·ªãch
// ‚Ä¢ Tr√† xanh: EGCG b·∫£o v·ªá t·∫ø b√†o

// **‚ö†Ô∏è D·∫§U HI·ªÜU N√äN KH√ÅM B√ÅC Sƒ®:**
// - ·ªêm li√™n t·ª•c tr√™n 3 l·∫ßn/nƒÉm
// - Nhi·ªÖm tr√πng k√©o d√†i
// - M·ªát m·ªèi th∆∞·ªùng xuy√™n
// - V·∫øt th∆∞∆°ng l√¢u l√†nh`,

//                 'ti·ªÉu ƒë∆∞·ªùng': `ü©∫ **QU·∫¢N L√ù B·ªÜNH TI·ªÇU ƒê∆Ø·ªúNG TYPE 2**

// **üìä HI·ªÇU V·ªÄ TI·ªÇU ƒê∆Ø·ªúNG:**
// Ti·ªÉu ƒë∆∞·ªùng type 2 x·∫£y ra khi c∆° th·ªÉ kh√¥ng s·ª≠ d·ª•ng insulin hi·ªáu qu·∫£ (kh√°ng insulin). M·ª•c ti√™u: Gi·ªØ ƒë∆∞·ªùng huy·∫øt ·ªïn ƒë·ªãnh 80-130 mg/dL l√∫c ƒë√≥i, <180 mg/dL sau ƒÉn 2h.

// **üçé CH·∫æ ƒê·ªò ƒÇN CHI TI·∫æT:**

// *Nguy√™n t·∫Øc c∆° b·∫£n:*
// ‚Ä¢ Carb ph·ª©c t·∫°p thay th·∫ø carb ƒë∆°n
// ‚Ä¢ ƒÇn nhi·ªÅu b·ªØa nh·ªè (5-6 b·ªØa/ng√†y)
// ‚Ä¢ K·∫øt h·ª£p protein + ch·∫•t x∆° m·ªói b·ªØa
// ‚Ä¢ Ki·ªÉm so√°t portion size

// *Th·ª±c ph·∫©m N√äN ƒÉn (ch·ªâ s·ªë GI th·∫•p):*
// ‚Ä¢ G·∫°o l·ª©t, y·∫øn m·∫°ch, quinoa
// ‚Ä¢ Rau xanh: brokoli, c·∫£i b√≥ x√¥i, atiso
// ‚Ä¢ Protein n·∫°c: c√°, g√†, ƒë·∫≠u ph·ª•
// ‚Ä¢ C√°c lo·∫°i h·∫°t: √≥c ch√≥, h·∫°nh nh√¢n
// ‚Ä¢ Tr√°i c√¢y: t√°o, l√™, berry (c√≥ v·ªè)

// *Th·ª±c ph·∫©m TR√ÅNH (ch·ªâ s·ªë GI cao):*
// ‚Ä¢ G·∫°o tr·∫Øng, b√°nh m√¨ tr·∫Øng, khoai t√¢y
// ‚Ä¢ ƒê∆∞·ªùng, m·∫≠t ong, n∆∞·ªõc ng·ªçt
// ‚Ä¢ B√°nh k·∫πo, kem, n∆∞·ªõc tr√°i c√¢y ƒë√≥ng h·ªôp
// ‚Ä¢ Th·ª©c ƒÉn chi√™n, ƒë·ªì ƒÉn nhanh

// *Th·ª±c ƒë∆°n m·∫´u 1 ng√†y:*

// S√°ng: Y·∫øn m·∫°ch + qu·∫£ berry + h·∫°t chia + s·ªØa h·∫°nh nh√¢n
// Ph·ª• s√°ng: 1 qu·∫£ t√°o + 10 h·∫°t √≥c ch√≥
// Tr∆∞a: C∆°m g·∫°o l·ª©t + c√° n∆∞·ªõng + rau lu·ªôc + d·∫ßu √¥ liu
// Ph·ª• chi·ªÅu: S·ªØa chua Hy L·∫°p + qu·∫ø
// T·ªëi: Salad quinoa + th·ªãt g√† + rau c·ªß n∆∞·ªõng
// T·ªëi mu·ªôn: 1 c·ªëc s·ªØa ƒë·∫≠u n√†nh kh√¥ng ƒë∆∞·ªùng

// **üèÉ‚Äç‚ôÇÔ∏è V·∫¨N ƒê·ªòNG ƒêI·ªÄU TR·ªä:**
// ‚Ä¢ ƒêi b·ªô sau ƒÉn 15-30 ph√∫t: Gi·∫£m ƒë∆∞·ªùng huy·∫øt 20-30%
// ‚Ä¢ Aerobic: 150 ph√∫t/tu·∫ßn c∆∞·ªùng ƒë·ªô v·ª´a
// ‚Ä¢ T·∫≠p t·∫°: 2-3 l·∫ßn/tu·∫ßn tƒÉng ƒë·ªô nh·∫°y insulin
// ‚Ä¢ Ki·ªÉm tra ƒë∆∞·ªùng huy·∫øt tr∆∞·ªõc/sau t·∫≠p

// **üíä THEO D√ïI V√Ä ƒêI·ªÄU TR·ªä:**
// ‚Ä¢ ƒêo ƒë∆∞·ªùng huy·∫øt: S√°ng ƒë√≥i v√† sau ƒÉn 2h
// ‚Ä¢ HbA1c: Ki·ªÉm tra 3-6 th√°ng/l·∫ßn, m·ª•c ti√™u <7%
// ‚Ä¢ U·ªëng thu·ªëc ƒë√∫ng gi·ªù theo ch·ªâ ƒë·ªãnh b√°c sƒ©
// ‚Ä¢ Kh√°m m·∫Øt, th·∫≠n, ch√¢n ƒë·ªãnh k·ª≥

// **‚ö†Ô∏è C·∫§P C·ª®U KHI:**
// - ƒê∆∞·ªùng huy·∫øt >300 mg/dL
// - H√¥n m√™, l√∫ l·∫´n
// - Bu·ªìn n√¥n, ƒëau b·ª•ng d·ªØ d·ªôi
// - Th·ªü c√≥ m√πi tr√°i c√¢y (ceton)`,

//                 'tim m·∫°ch': `‚ù§Ô∏è **B·∫¢O V·ªÜ TIM M·∫†CH TO√ÄN DI·ªÜN**

// **ü´Ä TIM KH·ªéE M·∫†NH L√Ä G√å:**
// Tim kh·ªèe c√≥ nh·ªãp ƒë·∫≠p 60-100 l·∫ßn/ph√∫t, huy·∫øt √°p <120/80 mmHg, cholesterol t·ªïng <200 mg/dL. B·ªánh tim m·∫°ch l√† nguy√™n nh√¢n t·ª≠ vong s·ªë 1 th·∫ø gi·ªõi, nh∆∞ng c√≥ th·ªÉ ph√≤ng ng·ª´a 80% b·∫±ng l·ªëi s·ªëng.

// **üêü DINH D∆Ø·ª†NG CHO TIM:**

// *Omega-3 (1-2g/ng√†y):*
// ‚Ä¢ C√° h·ªìi, c√° thu, c√° ng·ª´: 2-3 b·ªØa/tu·∫ßn
// ‚Ä¢ H·∫°t lanh, h·∫°t chia: 1 th√¨a/ng√†y
// ‚Ä¢ √ìc ch√≥: 7-10 qu·∫£/ng√†y
// ‚Ä¢ Vai tr√≤: Gi·∫£m vi√™m, ch·ªëng ƒë√¥ng m√°u

// *Ch·∫•t x∆° h√≤a tan (25-35g/ng√†y):*
// ‚Ä¢ Y·∫øn m·∫°ch: 1 b√°t gi·∫£m cholesterol 5-10%
// ‚Ä¢ ƒê·∫≠u ƒëen, ƒë·∫≠u ƒë·ªè: 1/2 ch√©n/ng√†y
// ‚Ä¢ T√°o, l√™ (c√≥ v·ªè): 1-2 qu·∫£/ng√†y
// ‚Ä¢ Vai tr√≤: H·∫•p th·ª• cholesterol x·∫•u

// *Kali (3500-4700mg/ng√†y):*
// ‚Ä¢ Chu·ªëi: 1 qu·∫£ = 400mg kali
// ‚Ä¢ Khoai lang, b√≠ ƒë·ªè n∆∞·ªõng
// ‚Ä¢ Rau bina, c·∫ßn t√¢y
// ‚Ä¢ Vai tr√≤: C√¢n b·∫±ng natri, gi·∫£m huy·∫øt √°p

// *Ch·∫•t ch·ªëng oxy h√≥a:*
// ‚Ä¢ Vi·ªát qu·∫•t, d√¢u t√¢y: 1 ch√©n/ng√†y
// ‚Ä¢ Chocolate ƒëen 70%: 1-2 mi·∫øng
// ‚Ä¢ Tr√† xanh: 2-3 c·ªëc/ng√†y
// ‚Ä¢ Vai tr√≤: B·∫£o v·ªá ƒë·ªông m·∫°ch kh·ªèi t·ªïn th∆∞∆°ng

// **üö´ TH·ª∞C PH·∫®M H·∫†I TIM:**
// ‚Ä¢ Mu·ªëi >2300mg/ng√†y: TƒÉng huy·∫øt √°p
// ‚Ä¢ Ch·∫•t b√©o trans: Margarine, ƒë·ªì chi√™n
// ‚Ä¢ ƒê∆∞·ªùng ph·ª• gia: N∆∞·ªõc ng·ªçt, b√°nh k·∫πo
// ‚Ä¢ Th·ªãt ƒë·ªè qu√° nhi·ªÅu: >500g/tu·∫ßn

// **üèÉ V·∫¨N ƒê·ªòNG CHO TIM:**
// ‚Ä¢ Cardio nh·∫π: ƒêi b·ªô nhanh 30 ph√∫t/ng√†y
// ‚Ä¢ B∆°i l·ªôi: TƒÉng s·ª©c b·ªÅn tim ph·ªïi
// ‚Ä¢ ƒê·∫°p xe: C·∫£i thi·ªán tu·∫ßn ho√†n
// ‚Ä¢ Yoga: Gi·∫£m stress, h·∫° huy·∫øt √°p
// ‚Ä¢ M·ª•c ti√™u: 150 ph√∫t/tu·∫ßn c∆∞·ªùng ƒë·ªô v·ª´a

// **üßò‚Äç‚ôÄÔ∏è QU·∫¢N L√ù STRESS:**
// Stress m√£n t√≠nh tƒÉng cortisol, g√¢y vi√™m ƒë·ªông m·∫°ch:
// ‚Ä¢ Thi·ªÅn 10-20 ph√∫t/ng√†y
// ‚Ä¢ H√≠t th·ªü s√¢u 4-7-8 (h√≠t 4s, n√≠n 7s, th·ªü ra 8s)
// ‚Ä¢ Nghe nh·∫°c c·ªï ƒëi·ªÉn gi·∫£m huy·∫øt √°p
// ‚Ä¢ D√†nh th·ªùi gian trong t·ª± nhi√™n

// **üí§ GI·∫§C NG·ª¶ V√Ä TIM:**
// ‚Ä¢ Ng·ªß 7-8 ti·∫øng: Gi·∫£m 22% nguy c∆° tim m·∫°ch
// ‚Ä¢ Tr√°nh th·ª©c khuya: R·ªëi lo·∫°n circadian
// ‚Ä¢ ƒêi·ªÅu tr·ªã ng∆∞ng th·ªü khi ng·ªß n·∫øu c√≥

// **‚ö†Ô∏è D·∫§U HI·ªÜU C·∫¢NH B√ÅO:**
// - ƒêau ng·ª±c, kh√≥ th·ªü
// - ƒêau lan ra tay tr√°i, h√†m
// - Ch√≥ng m·∫∑t, m·ªát m·ªèi b·∫•t th∆∞·ªùng
// - Ph√π ch√¢n, tƒÉng c√¢n ƒë·ªôt ng·ªôt
// ‚ûú G·ªåI C·∫§P C·ª®U 115 NGAY L·∫¨P T·ª®C!`
//             };

//             // T√¨m response ph√π h·ª£p
//             const lowerMessage = message.toLowerCase();
//             for (let key in responses) {
//                 if (lowerMessage.includes(key)) {
//                     return responses[key];
//                 }
//             }

//             // Default response chi ti·∫øt
//             return `üí° **C√ÇU H·ªéI V·ªÄ: "${message}"**

// C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng t∆∞ v·∫•n s·ª©c kh·ªèe! ƒê√¢y l√† chatbot demo s·ª≠ d·ª•ng Google Gemini AI.

// **üî• ƒê·ªÇ NH·∫¨N T∆Ø V·∫§N CHI TI·∫æT, B·∫°N C√ì TH·ªÇ H·ªéI V·ªÄ:**

// **üçé Dinh d∆∞·ª°ng & Gi·∫£m c√¢n:**
// ‚Ä¢ "Ch·∫ø ƒë·ªô ƒÉn gi·∫£m c√¢n cho ng∆∞·ªùi 70kg"
// ‚Ä¢ "Th·ª±c ƒë∆°n tƒÉng c∆° b·∫Øp"
// ‚Ä¢ "C√°ch t√≠nh calo h√†ng ng√†y"

// **üí™ TƒÉng c∆∞·ªùng s·ª©c kh·ªèe:**
// ‚Ä¢ "C√°ch tƒÉng mi·ªÖn d·ªãch m√πa l·∫°nh"
// ‚Ä¢ "Vitamin c·∫ßn thi·∫øt cho ph·ª• n·ªØ 30 tu·ªïi"
// ‚Ä¢ "Th·ª±c ph·∫©m t·ªët cho n√£o b·ªô"

// **üè• B·ªánh l√Ω th∆∞·ªùng g·∫∑p:**
// ‚Ä¢ "Ch·∫ø ƒë·ªô ƒÉn cho ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng"
// ‚Ä¢ "C√°ch gi·∫£m cholesterol t·ª± nhi√™n"
// ‚Ä¢ "Ph√≤ng ng·ª´a b·ªánh tim m·∫°ch"

// **üèÉ‚Äç‚ôÄÔ∏è L·ªëi s·ªëng l√†nh m·∫°nh:**
// ‚Ä¢ "L·ªãch t·∫≠p gym cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu"
// ‚Ä¢ "C√°ch c·∫£i thi·ªán gi·∫•c ng·ªß"
// ‚Ä¢ "Qu·∫£n l√Ω stress hi·ªáu qu·∫£"

// **‚ö° T√çCH H·ª¢P GEMINI AI TH·ª∞C T·∫æ:**
// 1. L·∫•y API key t·∫°i: https://makersuite.google.com/app/apikey
// 2. Thay v√†o code: \`const GEMINI_API_KEY = 'your-key-here'\`
// 3. Nh·∫≠n t∆∞ v·∫•n AI chi ti·∫øt v√† chuy√™n s√¢u!

// **‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:**
// Th√¥ng tin ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. V·ªõi c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe nghi√™m tr·ªçng, h√£y tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa ƒë·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã ch√≠nh x√°c nh·∫•t.

// H√£y h·ªèi c·ª• th·ªÉ h∆°n ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n chi ti·∫øt nh√©! üåü`;
//         }

//         // Kh·ªüi t·∫°o
//         document.getElementById('messageInput').focus();