 // C·∫•u h√¨nh Gemini AI API
        const GEMINI_API_KEY = 'AIzaSyDfZhAPypqYdKGun2lTblYNheCHth5LXb8';
        const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

        let conversationHistory = [];

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        function sendQuickQuestion(question) {
            document.getElementById('messageInput').value = question;
            sendMessage();
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;

            // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
            addMessage(message, 'user');
            input.value = '';
            
            // Hi·ªÉn th·ªã typing indicator
            showTypingIndicator();
            
            try {
                // G·ªçi API AI
                const response = await callAI(message);
                hideTypingIndicator();
                addMessage(response, 'bot');
            } catch (error) {
                hideTypingIndicator();
                addMessage('Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
                console.error('API Error:', error);
            }
        }

        function addMessage(text, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.innerHTML = text.replace(/\n/g, '<br>');
            
            messageDiv.appendChild(contentDiv);
            messagesContainer.appendChild(messageDiv);
            
            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function showTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'block';
            document.getElementById('sendBtn').disabled = true;
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
            document.getElementById('sendBtn').disabled = false;
        }

        async function callAI(message) {
            // Th√™m context cho chuy√™n gia s·ª©c kh·ªèe
            const systemPrompt = `B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n s·ª©c kh·ªèe v√† dinh d∆∞·ª°ng. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, cung c·∫•p th√¥ng tin ch√≠nh x√°c, th·ª±c t·∫ø v√† h·ªØu √≠ch. Lu√¥n nh·∫Øc nh·ªü ng∆∞·ªùi d√πng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© cho c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng. C√¢u tr·∫£ l·ªùi n√™n ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu v√† c√≥ c·∫•u tr√∫c r√µ r√†ng.`;
            
            conversationHistory.push({role: "user", content: message});

            // N·∫øu ch∆∞a c√≥ API key th√¨ d√πng demo response
            if (!GEMINI_API_KEY || GEMINI_API_KEY === 'AIzaSyDfZhAPypqYdKGun2lTblYNheCHth5LXb8-01Ms') {
                return getDemoResponse(message);
            }

            // G·ªçi Gemini AI API
            try {
                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        contents: [{
                            parts: [{
                                text: `${systemPrompt}\n\nC√¢u h·ªèi: ${message}`
                            }]
                        }],
                        generationConfig: {
                            temperature: 0.7,
                            maxOutputTokens: 1000,
                            topP: 0.8,
                            topK: 10
                        }
                    })
                });

                const data = await response.json();
                
                if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                    const aiResponse = data.candidates[0].content.parts[0].text;
                    conversationHistory.push({role: "assistant", content: aiResponse});
                    return aiResponse;
                } else {
                    throw new Error('Kh√¥ng th·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ Gemini API');
                }
            } catch (error) {
                console.error('Gemini API Error:', error);
                return getDemoResponse(message);
            }
        }

        function getDemoResponse(message) {
            // Demo responses cho c√°c ch·ªß ƒë·ªÅ ph·ªï bi·∫øn
            const responses = {
                'gi·∫£m c√¢n': `üçΩÔ∏è Ch·∫ø ƒë·ªô ƒÉn gi·∫£m c√¢n hi·ªáu qu·∫£:**
                ‚Ä¢ ƒÇn nhi·ªÅu rau xanh: Brokoli, c·∫£i b√≥ x√¥i, c·∫£i th·∫£o
                ‚Ä¢ Protein n·∫°c: Th·ªãt g√†, c√°, ƒë·∫≠u ph·ª•, tr·ª©ng
                ‚Ä¢ Carb ph·ª©c t·∫°p: G·∫°o l·ª©t, y·∫øn m·∫°ch, khoai lang
                ‚Ä¢ U·ªëng ƒë·ªß n∆∞·ªõc: 2-3 l√≠t/ng√†y
                ‚Ä¢ H·∫°n ch·∫ø: ƒê∆∞·ªùng, th·ª©c ƒÉn chi√™n, ƒë·ªì u·ªëng c√≥ ga

            L∆∞u √Ω: Gi·∫£m 0.5-1kg/tu·∫ßn l√† an to√†n. N√™n tham kh·∫£o chuy√™n gia dinh d∆∞·ª°ng!`,
                'mi·ªÖn d·ªãch': `üí™ C√°ch tƒÉng c∆∞·ªùng mi·ªÖn d·ªãch:**
                ‚Ä¢ Vitamin C: Cam, chanh, ·ªïi, kiwi
                ‚Ä¢ Zinc: H·∫°t b√≠, th·ªãt ƒë·ªè, ƒë·∫≠u
                ‚Ä¢ Vitamin D: √Ånh n·∫Øng m·∫∑t tr·ªùi, c√° b√©o
                ‚Ä¢ Ng·ªß ƒë·ªß gi·∫•c: 7-8 ti·∫øng/ƒë√™m
                ‚Ä¢ T·∫≠p th·ªÉ d·ª•c: 30 ph√∫t/ng√†y
                ‚Ä¢ Qu·∫£n l√Ω stress: Thi·ªÅn, yoga

            L∆∞u √Ω: N·∫øu hay ·ªëm, n√™n kh√°m s·ª©c kh·ªèe t·ªïng qu√°t!`,
                'ti·ªÉu ƒë∆∞·ªùng': `üçé **Ch·∫ø ƒë·ªô ƒÉn cho ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng:**
                ‚Ä¢ N√™n ƒÉn Rau xanh, c√°, th·ªãt n·∫°c, g·∫°o l·ª©t
                ‚Ä¢ H·∫°n ch·∫ø ƒê∆∞·ªùng, b√°nh ng·ªçt, n∆∞·ªõc ng·ªçt
                ‚Ä¢ ƒÇn nhi·ªÅu b·ªØa nh·ªè 5-6 b·ªØa/ng√†y
                ‚Ä¢ Ki·ªÉm so√°t portion D√πng ƒëƒ©a nh·ªè
                ‚Ä¢ T·∫≠p th·ªÉ d·ª•c: ƒêi b·ªô sau ƒÉn

            Quan tr·ªçng: Ph·∫£i theo d√µi ƒë∆∞·ªùng huy·∫øt v√† tu√¢n th·ªß ƒëi·ªÅu tr·ªã c·ªßa b√°c sƒ©!`,
                'tim m·∫°ch': `‚ù§Ô∏è Th·ª±c ph·∫©m t·ªët cho tim m·∫°ch:**
                ‚Ä¢ C√° b√©o: C√° h·ªìi, c√° thu, c√° ng·ª´
                ‚Ä¢ H·∫°t: √ìc ch√≥, h·∫°nh nh√¢n, h·∫°t lanh
                ‚Ä¢ Tr√°i c√¢y: Vi·ªát qu·∫•t, d√¢u t√¢y, l·ª±u
                ‚Ä¢ Rau xanh: C·∫£i b√≥ x√¥i, c·∫£i kale
                ‚Ä¢ Y·∫øn m·∫°ch: Gi√∫p gi·∫£m cholesterol
                Tr√°nh: Th·ª©c ƒÉn nhi·ªÅu mu·ªëi, ch·∫•t b√©o trans
                L∆∞u √Ω: N√™n ki·ªÉm tra s·ª©c kh·ªèe tim m·∫°ch ƒë·ªãnh k·ª≥!`
            };

            // T√¨m response ph√π h·ª£p
            const lowerMessage = message.toLowerCase();
            for (let key in responses) {
                if (lowerMessage.includes(key)) {
                    return responses[key];
                }
            }

            // Default response
            return `C√°m ∆°n b·∫°n ƒë√£ h·ªèi v·ªÅ "${message}". 

            T√¥i l√† chatbot t∆∞ v·∫•n s·ª©c kh·ªèe demo. ƒê·ªÉ c√≥ tr·∫£ l·ªùi ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ:
            üî∏ H·ªèi v·ªÅ: dinh d∆∞·ª°ng, gi·∫£m c√¢n, tƒÉng mi·ªÖn d·ªãch, b·ªánh ti·ªÉu ƒë∆∞·ªùng, tim m·∫°ch
            üî∏ S·ª≠ d·ª•ng c√°c g·ª£i √Ω ph√≠a tr√™n
            üî∏ T√≠ch h·ª£p API AI th·ª±c t·∫ø (OpenAI, Gemini) v√†o code
                L∆∞u √Ω quan tr·ªçng: Lu√¥n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© cho c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe nghi√™m tr·ªçng!`;
        }

        // Kh·ªüi t·∫°o
        document.getElementById('messageInput').focus();



